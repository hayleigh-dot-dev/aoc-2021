import 'ren/array' as Array exposing { #continue, #stop }
import 'ren/compare' as Compare
import 'ren/console' as Console
import 'ren/file' as File
import 'ren/function' as Function
import 'ren/logic' as Logic
import 'ren/math' as Math
import 'ren/maybe' as Maybe exposing { #just, #nothing }
import 'ren/result' as Result exposing { #ok, #err }
import 'ren/string' as String
import 'ren/tuple' as Tuple

import '../util' as Util

pub fun main = argv => {
    let path = if Array.member '--test' argv then 'test.txt' else 'input.txt'
    let withPerfLogs = Array.member '--perf' argv

    ret File.open path { sync: true }
        |> Result.map parse
        |> Result.andThen (solve { withPerfLogs })
}

pub fun parse = input => {
    ret Util.todo `Implement input parsing.`
}

pub fun solve = { withPerfLogs } input => 
    if withPerfLogs then 
        solveWithPerfLogs input 

    else
        Tuple.pair (solvePartOne input) (solvePartTwo input)

pub fun solveWithPerfLogs = input => {
    let [ partOne, timer ] = Util.time #nothing 'Part One' (fun _ => solvePartOne input)
    let [ partTwo, timer ] = Util.time (#just timer) 'Part Two' (fun _ => solvePartTwo input)

    let _ = if withPerfLogs then Console.log (timer.print ()) else ()

    ret [ partOne, partTwo ]
}

// PART ONE --------------------------------------------------------------------

pub fun solvePartOne = input => {
    ret Util.todo `Implement part one.`
}

// PART TWO --------------------------------------------------------------------

pub fun solvePartTwo = input => {
    ret Util.todo `Implement part two.`
}

// UTILS -----------------------------------------------------------------------

