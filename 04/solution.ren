import 'ren/array' as Array exposing { #continue, #stop }
import 'ren/compare' as Compare
import 'ren/console' as Console
import 'ren/file' as File
import 'ren/function' as Function
import 'ren/logic' as Logic
import 'ren/math' as Math
import 'ren/maybe' as Maybe exposing { #just, #nothing }
import 'ren/object' as Object
import 'ren/result' as Result exposing { #ok, #err }
import 'ren/string' as String
import 'ren/tuple' as Tuple

import '../util' as Util

pub fun main = argv => {
    let path = if Array.member '--test' argv then 'test.txt' else 'input.txt'
    let withPerfLogs = Array.member '--perf' argv

    ret File.open path { sync: true }
        |> Result.map parse
        |> Result.andThen (solve { withPerfLogs })
}

pub fun parse = input => {
    let parseRow = String.split ' ' >> Array.filter (Compare.notEq '') >> Array.filterMap String.toNumber
    let parseBoard = String.split '\\n' >> Array.map parseRow 

    let #just [ numbers, boards ] = String.split '\\n\\n' input |> Array.uncons

    let numbers = String.split ',' numbers |> Array.filterMap String.toNumber
    let boards  = Array.map (fun board => { rows: parseBoard board }) boards

    ret { numbers, boards }
}

pub fun solve = { withPerfLogs } input => {
    ret if withPerfLogs then {
        let [ partOne, timer ] = Util.time #nothing 'Part One' (fun _ => solvePartOne input)
        let [ partTwo, timer ] = Util.time (#just timer) 'Part Two' (fun _ => solvePartTwo input)

        let _ = Console.log (timer.print ())

        ret [ partOne, partTwo ]
    } else {
        let partOne = solvePartOne input
        let partTwo = solvePartTwo input

        ret [ partOne, partTwo ]
    }
}

// PART ONE --------------------------------------------------------------------

pub fun solvePartOne = { numbers, boards } => {
    ret playBingo numbers boards
        |> Array.sortBy .winningIndex
        |> Array.head
        |> Maybe.map (fun { rows, winningNum } => unmarked rows |> Array.sum |> Math.mul winningNum)
}

// PART TWO --------------------------------------------------------------------

pub fun solvePartTwo = { numbers, boards } => {
    ret playBingo numbers boards
        |> Array.sortBy .winningIndex
        |> Array.reverse
        |> Array.head
        |> Maybe.map (fun { rows, winningNum } => unmarked rows |> Array.sum |> Math.mul winningNum)
}

// UTILS -----------------------------------------------------------------------

fun playBingo = numbers boards => {
    ret Array.foldl
        (fun [ i, boards ] n => [ i + 1, Array.map (mark i n) boards ])
        ([ 0, boards ])
        numbers
        |> Tuple.second
}

enum MarkedCell
    = #marked _

fun mark = i n board => {
    let markRow = Array.map (fun c => when c is @Number x if x == n => #marked x else => c)
    let markedRows = Array.map markRow board.rows

    ret if Object.has 'winningNum' board then
        board
    
    else if hasWinningRow markedRows then 
        { rows: markedRows, winningNum: n, winningIndex: i }

    else
        { rows: markedRows }
}

fun unmarked = rows => {
    let unmarkedRow = Array.filterMap (fun c => when c is @Number n => #just n else => #nothing)

    ret Array.flatMap unmarkedRow rows
}

fun transpose = rows => {
    ret Array.foldl (fun b r => Array.map2 (::) r b) (Array.repeat 5 []) rows
}

fun hasWinningRow = rows => {
    let isCompleteRow = Array.all (fun c => when c is #marked _ => true else => false)

    ret Array.any isCompleteRow rows || Array.any isCompleteRow (transpose rows)
}